//合屏
function bigScreenLoadCollection(){	
	bs_lcsnum=0;	//设置合屏命令顺序
		
	if(bs_setmethod==1){
		bigScreenSetCommand(0);
	}else{
		bigScreenLogin1click();
		
		bigScreenSetCommand(0);
	}
}

//切屏
function bigScreenSetToWall(camip,camchannel){
	var devicename="";//摄像机配置名称
	bs_stwnum=0;	//设置切屏命令顺序

	//设备配置JSON
	//设备不为空
	if(bs_devices.length!=0){	
		//遍历配置
		for(var index in bs_devices){
		
			if(bs_devices[index].Address==camip){
				devicename=index;
			}		
		}
		
		if(devicename==""){
			sendThisScreenMSG("没有配置名称，请新增网络信号");
			return;
		}
		
		if(bs_setmethod==1){
			bigScreenSetCameraCommand(0,devicename,camchannel);
		}else{
			bigScreenLogin1click();
			
			bigScreenSetCameraCommand(0,devicename,camchannel);
		}
	}
}

//退屏
function bigScreenExitToWall(){	
	if(bs_setmethod==1){
		bigScreenExitCameraCommand(0);
	}else{
		bigScreenLogin1click();
		
		bigScreenExitCameraCommand();
	}
}

//分屏
function bigScreenSplitCollection(){
	if(bs_setmethod==1){
		bigScreenSplitCommand(0);
	}else{
		bigScreenLogin1click();
		
		bigScreenSplitCommand();
	}
		
}

//添加网络信号
function bigScreenAddDevices(){		
	if(bs_setmethod==1){
		bigScreenAddDevicesCommand();
	}else{
		bigScreenLogin1click();
		
		bigScreenAddDevicesCommand();
	}
}


//拼接器登录
function bigScreenLogin1click(){	//登录第一步
	var pinjieip=$("#config_pingjie_ip").val();
	var pinjieacount=$("#config_pingjie_acount").val();
	var pinjiepassword=$("#config_pingjie_password").val();
	
	try{	
		$.ajax( {  
			url: '/json/rpc.asp?ip=' + pinjieip,// 跳转到 action   
			data: JSON.stringify({"method":"global.login","params":{"userName":pinjieacount,"password":"","clientType":"Web3.0"},"id":10000}),  
			type:'post',  
			contentType: "application/x-www-form-urlencoded",
			cache:false,
			async : false, //默认为true 异步    
			dataType:'json',  //json
			success:function(data, textStatus) {  
				if (data) {
					var a = data.error.code;
					if (a == 268632079) {
						$("#config_pingjie_session").val(data.session);
						$("#config_pingjie_md5").val(CalcPassMd5(pinjiepassword));
											
						bigScreenLogin2click();
					}	        
			  }
			 },  
			error : function(XMLHttpRequest, textStatus, errorThrown) {
				  sendThisScreenMSG("异常！\n" + textStatus);  
			 }
		});
	}catch(e){
	}
}

function bigScreenLogin2click(){  //登录第二步
	var pinjieip=$("#config_pingjie_ip").val();
	var sessionstr = $("#config_pingjie_session").val();
	var pinjieacount=$("#config_pingjie_acount").val();
	var md5=$("#config_pingjie_md5").val();
	
	try{	
		var a = {"method":"global.login","session":parseInt(sessionstr),"params":{"userName":pinjieacount,"password":md5,"clientType":"Web3.0", "authorityType":"OldDigest"},"id":10000};
		$.ajax( {  
			url: '/json/rpc.asp?ip=' + pinjieip + '&id=' + sessionstr,// 跳转到 action    
			data:JSON.stringify(a),
			type:'post',  
			contentType: "application/x-www-form-urlencoded",
			cache:false,
			async : false, //默认为true 异步    
			dataType:'json',  //json
			success:function(data, textStatus) {  
				if (data.result == true){
					if(bs_setmethod==0){
						intervalProcessbigScreen = setInterval("bigScreenKeepAlive()", 30000);
						bs_loadnum=0;//初始化登陆	
						bigScreenLoadCommand(bs_loadnum);
						bs_setmethod++;//已经登录
					}				
				}else{
					sendThisScreenMSG('Reg failt');
				}
			 },  
			error : function(XMLHttpRequest, textStatus, errorThrown) {
				  sendThisScreenMSG("异常！\n" + textStatus);  
			 }
		});
	}catch(e){
	}
}

function bigScreenKeepAlive(){ 		///------------------会话保持
	var pinjieip=$("#config_pingjie_ip").val();
	var sessionstr = $("#config_pingjie_session").val();
		
	var a = {"method":"global.keepAlive","params":{"timeout": 300},"session":parseInt(sessionstr),"id":parseInt(bs_id)};	
	$.ajax( {  
	    url: '/json/rpc2.asp?ip=' + pinjieip + '&id=' + sessionstr,// 跳转到 action  
	    data:JSON.stringify(a),
	    type:'post',  
	    contentType: "application/x-www-form-urlencoded",
	    cache:false,
	    async : false, //默认为true 异步    
	    dataType:'json',  //json
	    success:function(data, textStatus) {  
	     },  
	    error : function(XMLHttpRequest, textStatus, errorThrown) {
	     }
	});	
	bs_id++;
}


function bigScreenLogoutclick(){		//注销
	var pinjieip=$("#config_pingjie_ip").val();
	var sessionstr = $("#config_pingjie_session").val();
	
	if(sessionstr!=""){
		try{	
			var a = {"method" : "global.logout","params" : null,"session":b,"id" : 10000};	
			$.ajax( {  
				url: '/json/rpc.asp?ip=' + pinjieip + '&id=' + sessionstr,// 跳转到 action  
				data:JSON.stringify(a),
				type:'post',  
				contentType: "application/x-www-form-urlencoded",
				cache:false,
				async : false, //默认为true 异步    
				dataType:'json',  //json
				success:function(data, textStatus) { 					
					$("#config_pingjie_md5").val("");
					$("#config_pingjie_session").val("");
				 },  
				error : function(XMLHttpRequest, textStatus, errorThrown) {
					 
				 }
			});
			clearInterval(intervalProcessbigScreen);
			bs_setmethod=0;
		}catch(e){
		}
	}
}

//首先加载初始化命令
function bigScreenLoadCommand(bs_loadnum){
	bs_loadnum=parseInt(bs_loadnum);
	if(bs_loadnum<35){
		
		var pinjieip=$("#config_pingjie_ip").val();
		var sessionstr = $("#config_pingjie_session").val();
		
		var json = "";
		var sRetFunc="";
		switch(bs_loadnum){
			case 0:
				json=bigScreenGetRequest("magicBox.getDeviceType","");
				break;
			case 1:
				json=bigScreenGetRequest("userManager.getUserInfo",{"name":"admin"});
				break;
			case 2:
				json=bigScreenGetRequest("matrix.getCards",{"host":0});
				break;
			case 3:
				json=bigScreenGetRequest("matrix.getCardInfo",{"host":0,"card":0});
				break;
			case 4:
				json=bigScreenGetRequest("matrix.getCardInfo",{"host":0,"card":1});
				break;
			case 5:
				json=bigScreenGetRequest("matrix.getCardInfo",{"host":0,"card":2});
				break;
			case 6:
				json=bigScreenGetRequest("matrix.getCardInfo",{"host":0,"card":3});
				break;
			case 7:
				json=bigScreenGetRequest("matrix.getCardInfo",{"host":0,"card":4});
				break;
			case 8:
				json=bigScreenGetRequest("matrix.getCardInfo",{"host":0,"card":5});
				break;
			case 9:
				json=bigScreenGetRequest("matrix.getCardInfo",{"host":0,"card":6});
				break;
			case 10:
				json=bigScreenGetRequest("matrix.getCardInfo",{"host":0,"card":7});
				break;
			case 11:
				json=bigScreenGetRequest("matrix.getCardInfo",{"host":0,"card":8});
				break;
			case 12:
				json=bigScreenGetRequest("matrix.getCardInfo",{"host":0,"card":9});
				break;
			case 13:
				json=bigScreenGetRequest("matrix.getCardInfo",{"host":0,"card":10});
				break;
			case 14:
				bs_id=1;
				json=bigScreenGetRequest('Security.getEncryptInfo');
				sRetFunc=function(data){
					if(data.result){
						pub=data.params.pub;
						bs_loadnum++;
						bigScreenLoadCommand(bs_loadnum);
					}
				};
				break;
			case 15:
				var enc=Encrypt.EncryptInfo(pub,'{"name":"RemoteDevice"}');
				json=bigScreenGetRequest('Security.getConfig',{salt:enc.salt,cipher:"AES-128",content:enc.content});
				sRetFunc=function(data){
					if(data.result){
						bs_devices=Encrypt.UnEncryptInfo(enc.key,data.params.content).table||{};
						//$("#textarea_backinfo").val(JSON.stringify(bs_devices));
						bs_loadnum++;
						bigScreenLoadCommand(bs_loadnum);
					}
				};
					
				break;
			case 16:
				json=bigScreenGetRequest("netApp.factory.instance","");//bs_objectid4
				sRetFunc=function(data){
					bs_objectid4=data.result;
					bs_loadnum++;
					bigScreenLoadCommand(bs_loadnum);
				};
				break;
			case 17:
				json=bigScreenGetRequest("netApp.getRemoteDeviceStatus",null,parseInt(bs_objectid4));
				break;
			case 18:
				json=bigScreenGetRequest("configManager.getConfig",{"name":"ChannelTitle"});
				break;
			case 19:
				json=bigScreenGetRequest("configManager.getConfig",{"name":"VideoIn"});
				break;
			case 20:
				json=bigScreenGetRequest("configManager.getConfig",{"name":"MonitorWall"});
				sRetFunc=function(data){
					bs_compositeid=data.params.table[0].Blocks[0].CompositeID;
					bs_loadnum++;
					bigScreenLoadCommand(bs_loadnum);
				};
				break;
			case 21:
				json=bigScreenGetRequest("monitorWall.factory.instance",{"channel":0});//bs_objectid2
				sRetFunc=function(data){
					bs_objectid2=data.result;
					bs_loadnum++;
					bigScreenLoadCommand(bs_loadnum);
				};
				break;
			case 22:
				json=bigScreenGetRequest("monitorWall.attachTour",{"proc":parseInt(sessionstr)+1},parseInt(bs_objectid2));
				break;
			case 23:
				json=bigScreenGetRequest("configManager.getConfig",{"name":"VideoOut"});
				break;
			case 24:
				json=bigScreenGetRequest("split.factory.instanceByCompositeID",{"compositeID":bs_compositeid});//bs_objectid1
				sRetFunc=function(data){
					bs_objectid1=data.result;
					bs_loadnum++;
					bigScreenLoadCommand(bs_loadnum);
				};
				break;
			case 25:
				json=bigScreenGetRequest("windowManager.factory.instance",{"channel":0,"composite":bs_compositeid});//bs_objectid3
				sRetFunc=function(data){
					bs_objectid3=data.result;
					bs_loadnum++;
					bigScreenLoadCommand(bs_loadnum);
				};
				break;
			case 26:
				json=bigScreenGetRequest("split.attachTour",{"proc":parseInt(sessionstr)},parseInt(bs_objectid1));
				break;
			case 27:
				json=bigScreenGetRequest("monitorWall.getScreenControlParams",{"compositeID":bs_compositeid},parseInt(bs_objectid2));
				break;
			case 28:
				json=bigScreenGetRequest("split.getMode",null,parseInt(bs_objectid1));
				break;
			case 29:
				json=bigScreenGetRequest("split.getScene",null,parseInt(bs_objectid1));
				break;
			case 30:
				json=bigScreenGetRequest("split.getAudioOutputEx",null,parseInt(bs_objectid1));
				break;
			case 31:
				json=bigScreenGetRequest("windowManager.getTourStatus",{"window":-1},parseInt(bs_objectid3));
				break;
			case 32:
				json=bigScreenGetRequest("monitorWall.getTvInfo",null,parseInt(bs_objectid2));
				break;
			case 33:
				json=bigScreenGetRequest("monitorWall.getLockStatus",null,parseInt(bs_objectid2));
				break;
			case 34:
				json=bigScreenGetRequest("monitorWall.getStatus",null,parseInt(bs_objectid2));
				break;
		}
				
		bs_id++;
		
		if(sRetFunc==""){
			sRetFunc=function(data){
				bs_loadnum++;
				bigScreenLoadCommand(bs_loadnum);
			};
		}
		sFailRet=function(data){
			sendThisScreenMSG("error:bs_loadnum"+bs_loadnum);
		};
		bigScreenSendRequest(json,sRetFunc,sFailRet);
	}
}

//合屏命令
function bigScreenSetCommand(bs_lcsnum){
	var bigplanname=$("#config_pingjie_planname").val(); //预案名称
	
	if(bigplanname!=""){
		bs_lcsnum=parseInt(bs_lcsnum);
		if(bs_lcsnum<6){
			
			var pinjieip=$("#config_pingjie_ip").val();
			var sessionstr = $("#config_pingjie_session").val();
			
			var json = "";
			var sRetFunc="";
			switch(bs_lcsnum){			
				//放大屏
				case 0:
					json=bigScreenGetRequest("configManager.getConfig",{"name":"MonitorWallCollection"});
					break;
				case 1:
					json=bigScreenGetRequest("monitorWall.loadCollection",{"name":bigplanname},parseInt(bs_objectid2));
					break;
				case 2:
					json=bigScreenGetRequest("split.getMode",null,parseInt(bs_objectid1));
					break;
				case 3:
					json=bigScreenGetRequest("split.getScene",null,parseInt(bs_objectid1));
					break;
				case 4:
					json=bigScreenGetRequest("split.getAudioOutputEx",null,parseInt(bs_objectid1));
					break;
				case 5:
					json=bigScreenGetRequest("windowManager.getTourStatus",{"window":-1},parseInt(bs_objectid3));
					break;
			}
			
			bs_id++;
			
			if(sRetFunc==""){
				sRetFunc=function(data){
					bs_lcsnum++;
					bigScreenSetCommand(bs_lcsnum);
				};
			}
			sFailRet=function(data){
				sendThisScreenMSG("error:bs_lcsnum"+bs_lcsnum);
			};
			bigScreenSendRequest(json,sRetFunc,sFailRet);
		}
	}else{
		sendThisScreenMSG("未设置预案");
	}
}

//切上摄像机
function bigScreenSetCameraCommand(bs_stwnum,devicename,camchannel){		
	bs_stwnum=parseInt(bs_stwnum);
		
	if(bs_stwnum<5){
		
		var pinjieip=$("#config_pingjie_ip").val();
		var sessionstr = $("#config_pingjie_session").val();
		
		var windowstr=$("#default_screen_select").val();
		
		if(camchannel==""){
			camchannel=0;
		}
		
		if(windowstr==""){
			windowstr=0;
		}
		
		if(devicename==""){
			return;
		}
		
		var json = "";
		var sRetFunc="";
		switch(bs_stwnum){
			//大屏中的第几屏
			case 0:
				json=bigScreenGetRequest("windowManager.getWorkMode",{"window":parseInt(windowstr)},parseInt(bs_objectid3));
				break;
			//切上视频
			case 1:
				json=bigScreenGetRequest("split.setSource",{"window":parseInt(windowstr),"source":{"Device":devicename,"Enable":true,"Interval":10,"VideoChannel":parseInt(camchannel),"VideoStream":"Main"}},parseInt(bs_objectid1));
				break;
			case 2:
				json=bigScreenGetRequest("split.getWinSource",{"window":parseInt(windowstr)},parseInt(bs_objectid1));
				break;
			case 3:
				json=bigScreenGetRequest("split.getSource",{"window":parseInt(windowstr)},parseInt(bs_objectid1));
				break;
			case 4:				
				json=bigScreenGetRequest("split.setTopWindow",{"window":parseInt(windowstr)},parseInt(bs_objectid1));
				break;
		}
		
		bs_id++;
		
		if(sRetFunc==""){
			sRetFunc=function(data){
				bs_stwnum++;
				bigScreenSetCameraCommand(bs_stwnum,devicename,camchannel);
			};
		}
		sFailRet=function(data){
			sendThisScreenMSG("error:bs_stwnum"+bs_stwnum);
		};
		bigScreenSendRequest(json,sRetFunc,sFailRet);
	}
}

//退出切屏
function bigScreenExitCameraCommand(){	
	var pinjieip=$("#config_pingjie_ip").val();
	var sessionstr = $("#config_pingjie_session").val();
	
	var json = "";
	var sRetFunc="";
	
	json=bigScreenGetRequest("split.setSource",{"window":0,"source":{"Device":null,"VideoChannel":null,"VideoStream ":null,"UniqueChannel ":-1}});
	
	bs_id++;
	
	bigScreenSendRequest(json,sRetFunc,sFailRet);
}

//分屏
function bigScreenSplitCommand(){	
	var pinjieip=$("#config_pingjie_ip").val();
	var sessionstr = $("#config_pingjie_session").val();
	
	var json = "";
	var sRetFunc="";
	
	json=bigScreenGetRequest("windowManager.setMode",{"window":0,"mode":"Split4"},parseInt(bs_objectid3));
	
	bs_id++;
	
	bigScreenSendRequest(json,sRetFunc,sFailRet);	
}

var Encrypt = (function(){
	return new function(){
		function randomNum(m) {
			m = m > 16 ? 16 : m;
			var num = Math.random().toString();
			if (num.substr(num.length - m, 1) === '0') {
				return randomNum(m);
			}
			return num.substring(num.length - m);
		}
		this.EncryptInfo = function(pub, src){
			var NE = {};
			var pub = pub.split(',');
			var NE0 = pub[0].split(':');
			var NE1 = pub[1].split(':');
			NE[NE0[0]] = NE0[1];
			NE[NE1[0]] = NE1[1];
			var num16Key = randomNum(16);
			//var num16Key=4231453946684396;//第一次
			//var num16Key=3689487207861966;//第二次
			$("#keynum").val(num16Key);
			// RSA加密
			var rsa = new RSAKey();
			rsa.setPublic(NE['N'], NE['E']);
			var salt = rsa.encrypt(num16Key);
			// AES加密
			var key = CryptoJS.enc.Utf8.parse(num16Key);
			var encrypted = CryptoJS.AES.encrypt(CryptoJS.enc.Utf8.parse(src), key, {
				mode: CryptoJS.mode.ECB,
				padding: CryptoJS.pad.ZeroPadding
			});
			return {
				'salt': salt,
				'key': key,
				'content': encrypted.toString()
			};
		};
		this.UnEncryptInfo = function(key, content){
			var jsonStr = CryptoJS.AES.decrypt(content, key, {
				mode: CryptoJS.mode.ECB,
				padding: CryptoJS.pad.ZeroPadding
			});
			return eval('('+CryptoJS.enc.Utf8.stringify(jsonStr)+')');
		};
	};
})();

function bigScreenSendRequest(jsonString, sRetFunc,sFailRet){
	var pinjieip=$("#config_pingjie_ip").val();
	var sessionstr = $("#config_pingjie_session").val();
	
	var login=0;
	//if(rpcUrl == "/RPC2_Login") login=1;
	//if(asyn == undefined) asyn = true;
	if(sRetFunc == undefined) sRetFunc = function(){};
	if(sFailRet == undefined) sFailRet = function(){};
	
	$.ajax( {
		url: '/json/rpc3.asp?ip=' + pinjieip + "&id=" + sessionstr +"&login="+login+"&user="+navigator.userAgent,
	    data:JSON.stringify(jsonString),
	    type:'post',
	    contentType: "application/x-www-form-urlencoded",
	    cache:false,
	    async : false,
	    dataType:'json',
	    success:function(data) {
			if(data!=null){
				sRetFunc(data);
			}
	     },
	    error : function(XMLHttpRequest, textStatus, errorThrown) {
			sFailRet();
	     }
	});
}

function bigScreenGetRequest(method,params,object){
	var sessionstr = $("#config_pingjie_session").val();
	
	if(params == undefined) params = null;
	var json = {
		"method":method,
		"params":params,
		"session":parseInt(sessionstr),
		"id":bs_id
	};
	if(object !== undefined) json.object = object;
	return json;
}

//加密
//单IP
function CalcMd5(a,b,u,p){		
  //var a = $("#random").val();
	//var b = $("#realm").val();
	var f = hex_md5(u + ":" + b + ":" + p);
	var g = hex_md5(u + ":" + a + ":" + f);
	return g;
}
//16路
function CalcPassMd5(p){		
	var c = DH_Superencipherment(p);
	return c;
}

function mytoInt(b, a){
	return parseInt(b, a || 10)
}

function DH_Superencipherment(c) {
    for (var e = "", h = [], c = hex_md5(c), f = [], a = 0; a < 16 && a < c.length / 2; a++)
        f[a] = mytoInt(c.slice(2 * a, 2 * a + 2),16);
    for (a = 0; a <= 7; a++)
        h[a] = (f[2 * a] + f[2 * a + 1]) % 62,
        h[a] += h[a] >= 0 && h[a] <= 9 ? 48 : h[a] >= 10 && h[a] <= 35 ? 55 : 61,
        e += String.fromCharCode(h[a]);
    return e
}

//添加网络信号
function bigScreenAddDevicesCommand(){
	var devName=$('#input_monitorwall_name').val().trim();
	var ip=$('#input_monitorwall_ip').val().trim();
	var RemoteDeviceID = "RemoteDevice"+Math.floor(Math.random()*10000+1);
	while(bs_devices[RemoteDeviceID]){
		RemoteDeviceID = "RemoteDevice"+Math.floor(Math.random()*10000+1);
	}
	//bs_devices[RemoteDeviceID]={};
	//判断名称是否为空
	//sendThisScreenMSG(devName==null);
	if(!isEmpty(devName)){
		sendThisScreenMSG("名称不能为空或空格");
		$('#input_monitorwall_name').focus();
		return;
	}
	//判断ip是否合法
	if(!isIpAddress(ip)){
		sendThisScreenMSG("IP地址格式错误，请重新输入");
		$('#input_monitorwall_ip').focus();
		return false;
	}
	//手动添加时判断设备是否已经添加
	for(var id in bs_devices){
		if(id!=RemoteDeviceID&&ip==bs_devices[id].Address&&bs_devices[id].Port==37777&&bs_devices[id].ProtocolType=="Private"){
			sendThisScreenMSG("设备已添加");
			return false;
		}
	}
	var serviceType="TCP";
	//var tepRemoteDev = bs_devices[RemoteDeviceID];
	var tepRemoteDev={};
	tepRemoteDev.Name = devName;
	tepRemoteDev.Address = ip;
	tepRemoteDev.ProtocolType = "Private";
	tepRemoteDev.UserName = "admin";
	tepRemoteDev.Password = "admin";
	tepRemoteDev.Port = 37777;
	tepRemoteDev.HttpPort = 80;
	tepRemoteDev.RtspPort = 554;
	tepRemoteDev.AudioInputChannels = 0;
	tepRemoteDev.Definition = 'Standard';
	tepRemoteDev.DeviceClass = '';
	tepRemoteDev.Enable = true;
	tepRemoteDev.MachineGroup = '';
	tepRemoteDev.RemoteChannel = 0;
	tepRemoteDev.VideoInputChannels = 0;
	tepRemoteDev.DeviceType = '';
	//tepRemoteDev.VideoInputs = curjsonRemoteDevice[curRemoteDeviceID].VideoInputs;
	tepRemoteDev.VideoInputs;
	tepRemoteDev.AlarmInputs;
	/*var enableChNum = 0;
	for(ID in bs_devices){
		var videoInputs=bs_devices[ID].VideoInputs;
		if(videoInputs===undefined)continue;
		for(var i=0,l=videoInputs.length;i<l;i++){
			if(videoInputs[i]&&videoInputs[i].Enable)enableChNum++;
		}
	}
	if(enableChNum>1024){
		sendThisScreenMSG("使能的远程通道数大于1024，请确认并去掉部分使能勾选！");
		return false;
	}*/
	bs_devices[RemoteDeviceID] = tepRemoteDev;
	setDeviveConfig();
}

function isEmpty(str){
	if(str!=null&&str.length>0){
		return true;
	}
	return false;
}

function isIpAddress(address){
	if(/^(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})$/.test(address)){
		var ip=address.split('.');
		if(ip[0]-0<=255&&ip[1]-0<=255&&ip[2]-0<=255&&ip[3]-0<=255){
			return true;
		}
	}
	return false;
}

//获取配置
function getDeviveConfig(){
	bigScreenSendRequest(bigScreenGetRequest('Security.getEncryptInfo'),function(data){
		if(data.result){
			pub=data.params.pub;
		}
	});
	bs_id++;
	var enc=Encrypt.EncryptInfo(pub,'{"name":"RemoteDevice"}');
	bigScreenSendRequest(bigScreenGetRequest('Security.getConfig',{salt:enc.salt,cipher:"AES-128",content:enc.content}),function(data){
		if(data.result){
			bs_devices=Encrypt.UnEncryptInfo(enc.key,data.params.content).table||{};
		}
	});
	bs_id++;
	getconfig();//...
}

function getconfig(){
	bigScreenSendRequest(bigScreenGetRequest("netApp.factory.instance",""),function(data){
		bs_objectid4=data.result;
	});
	bs_id++;
	bigScreenSendRequest(bigScreenGetRequest("netApp.getRemoteDeviceStatus",null,parseInt(bs_objectid4)));
	bs_id++;
}

//添加配置
function setDeviveConfig(){
	bigScreenSendRequest(bigScreenGetRequest('Security.getEncryptInfo'),function(data){
		if(data.result){
			pub=data.params.pub;
		}
	});
	bs_id++;
	var enc=Encrypt.EncryptInfo(pub,'{"name":"RemoteDevice","table":'+JSON.stringify(bs_devices)+',"options":""}');
	bigScreenSendRequest(bigScreenGetRequest('Security.setConfig',{salt:enc.salt,cipher:"AES-128",content:enc.content}),function(data){
		if(data.result){
			sendThisScreenMSG("新增成功");
			getconfig();//...
			getDeviveConfig();//重新获取配置
		}else{
			getDeviveConfig();//重新获取配置
			sendThisScreenMSG(Encrypt.UnEncryptInfo(enc.key,data.params.content).options);//失败提示返回信息
		}
	});
	bs_id++;
}
